package parkingLotApp;

import java.net.URL;
import java.util.ResourceBundle;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.ComboBox;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import parkingLotSystem.Car;
import parkingLotSystem.ParkingLot;
import parkingLotSystem.Truck;
import parkingLotSystem.Vehicle;

public class MainController implements Initializable{

	//private Label numberLbl;
	@FXML	// linked to scene builder
	ParkingLot theParkingLot = new ParkingLot();
	@FXML private TableView<Vehicle> vehicleTableView = new TableView<Vehicle>();
	@FXML private TableColumn<Vehicle, String> licensePlateTableColumn = new TableColumn<>();
	@FXML private TableColumn<Vehicle, Integer> spotNumberTableColumn = new TableColumn<>();
	@FXML private TableColumn<Vehicle, Double> billTableColumn = new TableColumn<>();
	@FXML private TableColumn<Vehicle, String> timeParkedTableColumn = new TableColumn<>();
	@FXML private TableColumn<Vehicle, String> vehicleTypeTableColumn = new TableColumn<>();
	@FXML private TextField licensePlateField = new TextField();
	@FXML private TextField timeRequestedField = new TextField();
	@FXML private TextField parkingSpotNumberField = new TextField();
	@FXML private TextField searchField = new TextField();
	@FXML private RadioButton isATruckRb = new RadioButton();
	@FXML private TextArea errorFeedbackTextArea = new TextArea();
	@FXML private ComboBox<String> searchByComboBox = new ComboBox<String>(); // <String> added as test
	private boolean searchByLicensePlate;
	private boolean searchBySpotNumber;
	private AlertWindow alertWindow = new AlertWindow();


	public void addVehicle(ActionEvent event){
		if(isATruckRb.isSelected() && checkTextFieldInput()){
    		String licensePlate = licensePlateField.getText();
    		int spotNumber = Integer.parseInt(parkingSpotNumberField.getText());
    		double requestedParkingTime = Double.parseDouble(timeRequestedField.getText());
    		Truck newTruck = new Truck(licensePlate, requestedParkingTime, spotNumber); //vehicle created
    		theParkingLot.getVehicleParkingSpots().add(newTruck);
    		vehicleTableView.getItems().add(newTruck);
    		clearTextFields();
    		//displayVehiclesInHashSet(); //TEST METHOD FOR HASH SET
    	} else if (checkTextFieldInput()){
    		String licensePlate = licensePlateField.getText();
    		int spotNumber = Integer.parseInt(parkingSpotNumberField.getText());
    		double requestedParkingTime = Double.parseDouble(timeRequestedField.getText());
    		Car newCar = new Car(licensePlate, requestedParkingTime, spotNumber); //vehicle created
    		theParkingLot.getVehicleParkingSpots().add(newCar);
    		vehicleTableView.getItems().add(newCar);
    		clearTextFields();
    		//displayVehiclesInHashSet(); //TEST METHOD FOR HASH SET
    	}
	}


	// Action event for canceling a vehicle (deletes vehicle from list view and hashSet)
	public void cancelVehicle(ActionEvent event){
            ObservableList<Vehicle> allVehicles;
            Vehicle vehicleSelected;
       		allVehicles = vehicleTableView.getItems();
           	vehicleSelected = vehicleTableView.getSelectionModel().getSelectedItem();
           	promptUserForVehicleDeletion(vehicleSelected, allVehicles); //make sure user wants to delete vehicle
           	clearTextFields();
           	displayVehiclesInHashSet(); //TEST METHOD FOR HASH SET
    }


	public void searchVehicle(ActionEvent event){
		if(searchByLicensePlate == true && checkSearchFieldInput() == true){
			String licensePlateInput = searchField.getText();
			Vehicle v = theParkingLot.findVehicleByLicensePlate(licensePlateInput);
			checkLicensePlateSearchInput(v, licensePlateInput);
		}
		else if(searchBySpotNumber == true && checkSearchFieldInput() == true){
			int spotNumberInput = Integer.parseInt(searchField.getText());
			Vehicle v = theParkingLot.findVehicleBySpotNumber(spotNumberInput);
			checkSpotNumberSearchInput(v, spotNumberInput);
		} else if (searchByLicensePlate == false && searchBySpotNumber == false){
			errorFeedbackTextArea.setText("A Search By option must be selected");
		}
		searchField.clear();
	}


	public void checkLicensePlateSearchInput(Vehicle v, String plateInput){
		if(v == null){
			errorFeedbackTextArea.setText("No vehicle was found with the License Plate number: " + plateInput);
		} else{
			errorFeedbackTextArea.setText("Vehicle Found: " + v.toString());
		}
	}

	public void checkSpotNumberSearchInput(Vehicle v, int spotInput){
		if(v == null){
			errorFeedbackTextArea.setText("No vehicle was found in the Spot number: " + spotInput);
		} else{
			errorFeedbackTextArea.setText("Vehicle Found: " + v.toString());
		}
	}


	// Action event for user selecting a 'Search By' combo box button
	public void selectSearchByValue(ActionEvent event){
		String search = (String) searchByComboBox.getValue();
		if(search.equalsIgnoreCase("License Plate")){
			searchByLicensePlate = true;
			searchBySpotNumber = false;
		}else if(search.equalsIgnoreCase("Spot Number")){
			searchByLicensePlate = false;
			searchBySpotNumber = true;
		}
	}


	public boolean checkTextFieldInput(){
		if(licensePlateField.getText().isEmpty() || licensePlateField.getText() == null){
			errorFeedbackTextArea.setText("Error: Licens Plate field empty");
			return false;
		}
		if(timeRequestedField.getText().isEmpty() || timeRequestedField.getText() == null){
			errorFeedbackTextArea.setText("Error: Time requested field empty");
			return false;
		}
		if(licensePlateField.getText().length() < 4 || licensePlateField.getText().length() > 7){
			errorFeedbackTextArea.setText("Error: License Plate field must be between 4-7 characters");
			return false;
		}
		if(Double.parseDouble(timeRequestedField.getText()) > 72 ||
				Double.parseDouble(timeRequestedField.getText()) <= 0){
			errorFeedbackTextArea.setText("Error: Time requested must be between 0-72 hours");
			return false;
		}
		if(theParkingLot.licensePlateExists(licensePlateField.getText())){
			errorFeedbackTextArea.setText("Error: The license plate entered already exists");
			return false;
		}
		if(parkingSpotNumberField.getText().isEmpty() || parkingSpotNumberField.getText() == null){
			errorFeedbackTextArea.setText("Error: A parking spot number must be entered");
			return false;
		}
		if(Integer.parseInt(parkingSpotNumberField.getText()) < 0 ||
				Integer.parseInt(parkingSpotNumberField.getText()) > 100){
			errorFeedbackTextArea.setText("Error: Parking spot bounds set from 0-100");
			return false;
		}
		if(theParkingLot.spotNumberExists(Integer.parseInt(parkingSpotNumberField.getText()))){
			errorFeedbackTextArea.setText("Error: Parking spot entered already exists");
			return false;
		}
		if(!licensePlateField.getText().matches("[a-zA-Z0-9]*")){
			errorFeedbackTextArea.setText("Error: License Plate can contain only numbers and letters.");
			return false;
		}
		 else{
			errorFeedbackTextArea.clear();
			return true;
		}
	}

	//checks field input before search
	public boolean checkSearchFieldInput(){
		if(searchField.getText().isEmpty() || searchField.getText() == null){
			errorFeedbackTextArea.setText("Error: Search text field empty");
			return false;
		} else return true;
	}


	public void clearTextFields(){
		licensePlateField.clear();
		timeRequestedField.clear();
		parkingSpotNumberField.clear();
		searchField.clear();
		errorFeedbackTextArea.clear();
		isATruckRb.setSelected(false); //un-select truck button
	}


 	//TEST METHOD: DISPLAY ON CONSOLE theParkingLot.getVehicleParkingSpots()
	public void displayVehiclesInHashSet(){
		for(Vehicle v : theParkingLot.getVehicleParkingSpots()){
			System.out.println(v.toString());
		}
	}


	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// initializing search ComboBox
		searchByComboBox.getItems().addAll("License Plate", "Spot Number");

		// initializing vehicle Table View
		licensePlateTableColumn.setCellValueFactory(new PropertyValueFactory<>("licensePlate"));
		spotNumberTableColumn.setCellValueFactory(new PropertyValueFactory<>("spotNumber"));
		billTableColumn.setCellValueFactory(new PropertyValueFactory<>("calculatedBill"));
		timeParkedTableColumn.setCellValueFactory(new PropertyValueFactory<>("timeParked"));
		vehicleTypeTableColumn.setCellValueFactory(new PropertyValueFactory<>("vehicleType"));

		// set boolean default to false
		searchByLicensePlate = false;
		searchBySpotNumber = false;
	}


	public void promptUserForVehicleDeletion(Vehicle vehicleSelected, ObservableList<Vehicle> allVehicles){
		if(vehicleSelected != null){
			alertWindow.displayAlertBox("Alert Window", "Are you sure you want to cancel? \nAll vehicle information will be lost."); // note: static methods can be called
		}
		if(alertWindow.isVehicleDeleted == true){
		  	allVehicles.removeAll(vehicleSelected);	//remove vehicle selected from table
           	theParkingLot.getVehicleParkingSpots().remove(vehicleSelected);	//remove vehicle selected from hash set
		}
	}

}
